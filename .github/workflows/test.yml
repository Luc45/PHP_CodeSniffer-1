name: Test

on:
  # Run on pushes to `master` and on all pull requests.
  # Prevent the build from running when there are only irrelevant changes.
  push:
  pull_request:
  # Allow manually triggering the workflow.
  workflow_dispatch:

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  coverage:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - php: '7.2'
            custom_ini: false
          - php: '8.0'
            custom_ini: true
          - php: '8.0'
            custom_ini: false
          - php: '8.1'
            custom_ini: false
          - php: '8.2'
            custom_ini: true
          - php: '8.3'
            custom_ini: false

    name: "Coverage: ${{ matrix.php }} ${{ matrix.custom_ini && ' with custom ini settings' || '' }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup ini config
        id: set_ini
        run: |
          # Set the "short_open_tag" ini to make sure specific conditions are tested.
          # Also turn on error_reporting to ensure all notices are shown.
          if [[ ${{ matrix.custom_ini }} == true ]]; then
            echo 'PHP_INI=error_reporting=-1, display_errors=On, date.timezone=Australia/Sydney, short_open_tag=On' >> $GITHUB_OUTPUT
          else
            echo 'PHP_INI=error_reporting=-1, display_errors=On' >> $GITHUB_OUTPUT
          fi

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          ini-values: ${{ steps.set_ini.outputs.PHP_INI }}
          coverage: xdebug

      # Install dependencies and handle caching in one go.
      # @link https://github.com/marketplace/actions/install-php-dependencies-with-composer
      - name: Install Composer dependencies
        uses: "ramsey/composer-install@v2"
        with:
          # Bust the cache at least once a month - output format: YYYY-MM.
          custom-cache-suffix: $(date -u "+%Y-%m")

      - name: Grab PHPUnit version
        id: phpunit_version
        # yamllint disable-line rule:line-length
        run: echo "VERSION=$(vendor/bin/phpunit --version | grep --only-matching --max-count=1 --extended-regexp '\b[0-9]+\.[0-9]+')" >> $GITHUB_OUTPUT

      - name: "DEBUG: Show grabbed version"
        run: echo ${{ steps.phpunit_version.outputs.VERSION }}

      - name: 'PHPCS: set the path to PHP'
        run: php bin/phpcs --config-set php_path php

      # PHPUnit 9.3 started using PHP-Parser for code coverage, which can cause issues due to Parser
      # also polyfilling PHP tokens.
      # As of PHPUnit 9.3.4, a cache warming option is available.
      # Using that option prevents issues with PHP-Parser backfilling PHP tokens during our test runs.
      - name: "Warm the PHPUnit cache (PHPUnit 9.3+)"
        if: ${{ steps.phpunit_version.outputs.VERSION >= '9.3' }}
        run: vendor/bin/phpunit --coverage-cache ./build/phpunit-cache --warm-coverage-cache

      - name: "Run the unit tests with code coverage (PHPUnit < 9.3)"
        if: ${{ steps.phpunit_version.outputs.VERSION < '9.3' }}
        run: vendor/bin/phpunit

      - name: "Run the unit tests with code coverage (PHPUnit 9.3+)"
        if: ${{ steps.phpunit_version.outputs.VERSION >= '9.3' }}
        run: vendor/bin/phpunit --coverage-cache ./build/phpunit-cache

      - name: Upload coverage results to Coveralls
        if: ${{ success() }}
        uses: coverallsapp/github-action@v2
        with:
          format: clover
          file: build/logs/clover.xml
          flag-name: php-${{ matrix.php }}-custom-ini-${{ matrix.custom_ini }}
          parallel: true

  coveralls-finish:
    needs: coverage
    if: always() && needs.coverage.result == 'success'

    runs-on: ubuntu-latest

    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2
        with:
          parallel-finished: true
